{"version":3,"file":"static/js/274.b275ab7a.chunk.js","mappings":"+JAqGA,UAlGoB,SAAC,GAAoD,EAAlDA,QAAmD,IAA1CC,EAAyC,EAAzCA,aAAcC,EAA2B,EAA3BA,qBAC5C,GAAsCC,EAAAA,EAAAA,WAAS,GAA/C,eAAOC,EAAP,KAAoBC,EAApB,KACA,GAAgCF,EAAAA,EAAAA,UAAS,IAAzC,eAAOG,EAAP,KAAiBC,EAAjB,KAEMC,EAAc,SAAAC,GACM,IAApBH,EAASI,OACXH,EAAYE,GAEZF,EAAY,IAEdF,GAAgBD,EACjB,EAED,OACE,iCACE,2BACG,SACD,mBAAQO,KAAK,SAASC,QAAS,kBAAMV,GAAN,EAA/B,SACG,mBAEF,oBAEFD,EAAaS,OAAS,IACrB,8BACE,4BACE,2BACE,wBAAI,eACJ,wBAAI,WACJ,wBAAI,eACJ,wBAAI,wBACJ,wBAAI,iBACJ,wBAAI,gBACJ,wBAAI,cACJ,wBAAI,mBAGR,2BACGT,EAAaY,KAAI,SAAAJ,GAAI,OACpB,2BACE,wBAAKA,EAAKK,MACV,wBAAKL,EAAKM,WAAWC,SACrB,wBAAKP,EAAKM,WAAWE,aACrB,wBAAKR,EAAKM,WAAWG,iBACrB,wBAAKT,EAAKM,WAAWI,eACrB,wBAAKV,EAAKM,WAAWK,aACrB,wBACGX,EAAKM,WAAWM,YACjBZ,EAAKM,WAAWM,WAAWC,gBACzB,gBACEC,IAAKd,EAAKM,WAAWM,WAAWC,eAChCE,IAAI,GACJC,MAAM,MACNC,OAAO,SAGT,uBAAG,8BAGP,wBAAKjB,EAAKM,WAAWY,YACrB,yBACE,mBACEhB,KAAK,SACLC,QAAS,kBAAMJ,EAAYC,EAAlB,EAFX,SAIG,4BA1BEA,EAAKK,GADM,SAmC3BV,IACC,UAAC,IAAD,CAAOI,YAAaA,EAAaF,SAAUA,EAA3C,WACE,uBAAIA,EAASQ,MACb,uBAAIR,EAASS,WAAWC,SACxB,uBAAIV,EAASS,WAAWa,YACxB,uBAAItB,EAASS,WAAWG,iBACxB,uBAAIZ,EAASS,WAAWI,eACxB,uBAAIb,EAASS,WAAWK,aACxB,yBACGd,EAASS,WAAWM,YACrBf,EAASS,WAAWM,WAAWC,gBAC7B,gBACEC,IAAKjB,EAASS,WAAWM,WAAWC,eACpCE,IAAI,MAGN,uBAAG,8BAGP,uBAAIlB,EAASS,WAAWY,gBAKjC,C,4EClGD,EAA0B,wBAA1B,EAA0D,sB,SCGpDE,EAAcC,SAASC,eAAe,cA6B5C,EA3Bc,SAAC,GAAwC,IAAtCvB,EAAqC,EAArCA,YAAawB,EAAwB,EAAxBA,SAAwB,EAAd1B,UACtC2B,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAgB,SAAAC,GACL,WAAXA,EAAEC,MAAmB5B,GAC1B,EAID,OAFA6B,OAAOC,iBAAiB,UAAWJ,GAE5B,WACLG,OAAOE,oBAAoB,UAAWL,EACvC,CACF,GAAE,CAAC1B,IAMJ,OAAOgC,EAAAA,EAAAA,eACL,gBAAKC,UAAWC,EAAa9B,QALH,SAAA+B,GACtBA,EAAIC,SAAWD,EAAIE,eAAerC,GACvC,EAGC,UACE,gBAAKiC,UAAWC,EAAhB,SACGV,MAGLH,EAEH,C","sources":["components/AuthorBooks/AuthorBooks.jsx","webpack://books-search/./src/components/Modal/styles.module.css?45f9","components/Modal/Modal.jsx"],"sourcesContent":["import Modal from '../Modal/Modal';\nimport { useState } from 'react';\n\nconst AuthorBooks = ({ loading, authorsBooks, handleBackFromAuthor }) => {\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [bookdata, setBookData] = useState([]);\n\n  const toggleModal = book => {\n    if (bookdata.length === 0) {\n      setBookData(book);\n    } else {\n      setBookData([]);\n    }\n    setModalIsOpen(!modalIsOpen);\n  };\n\n  return (\n    <>    \n      <div>\n        {'Home>'}\n        <button type=\"button\" onClick={() => handleBackFromAuthor()}>\n          {'Searched books'}\n        </button>\n        {'>Authors books'}\n      </div>\n      {authorsBooks.length > 0 && (\n        <table>\n          <thead>\n            <tr>\n              <th>Book's ID</th>\n              <th>Title</th>\n              <th>Publisher</th>\n              <th>Date of publishing</th>\n              <th>Description</th>\n              <th>Page count</th>\n              <th>Tumbnail</th>\n              <th>Language</th>\n            </tr>\n          </thead>\n          <tbody>\n            {authorsBooks.map(book => (\n              <tr key={book.id}>\n                <td>{book.id}</td>\n                <td>{book.volumeInfo.title}</td>\n                <td>{book.volumeInfo.publisher}</td>\n                <td>{book.volumeInfo.publishedDate}</td>\n                <td>{book.volumeInfo.description}</td>\n                <td>{book.volumeInfo.pageCount}</td>\n                <td>\n                  {book.volumeInfo.imageLinks &&\n                  book.volumeInfo.imageLinks.smallThumbnail ? (\n                    <img\n                      src={book.volumeInfo.imageLinks.smallThumbnail}\n                      alt=\"\"\n                      width=\"50%\"\n                      height=\"50%\"\n                    />\n                  ) : (\n                    <p>No thumbnail available</p>\n                  )}\n                </td>\n                <td>{book.volumeInfo.language}</td>\n                <td>\n                  <button\n                    type=\"button\"\n                    onClick={() => toggleModal(book)}\n                  >\n                    {\"Press to learn info\"}\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}      \n      {modalIsOpen && (\n        <Modal toggleModal={toggleModal} bookdata={bookdata}>\n          <p>{bookdata.id}</p>\n          <p>{bookdata.volumeInfo.title}</p>\n          <p>{bookdata.volumeInfo.publishe}</p>\n          <p>{bookdata.volumeInfo.publishedDate}</p>\n          <p>{bookdata.volumeInfo.description}</p>\n          <p>{bookdata.volumeInfo.pageCount}</p>\n          <div>\n            {bookdata.volumeInfo.imageLinks &&\n            bookdata.volumeInfo.imageLinks.smallThumbnail ? (\n              <img\n                src={bookdata.volumeInfo.imageLinks.smallThumbnail}\n                alt=\"\"\n              />\n            ) : (\n              <p>No thumbnail available</p>\n            )}\n          </div>\n          <p>{bookdata.volumeInfo.language}</p>\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default AuthorBooks;\n","// extracted by mini-css-extract-plugin\nexport default {\"Overlay\":\"styles_Overlay__nMvru\",\"Modal\":\"styles_Modal__25F64\",\"img\":\"styles_img__m7PBM\"};","import { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport css from './styles.module.css';\n\nconst modalWindow = document.getElementById('modal-root');\n\nconst Modal = ({ toggleModal, children, bookdata}) => {\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Escape') toggleModal();\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [toggleModal]);\n\n  const handleBackdropClick = evt => {\n    if (evt.target === evt.currentTarget) toggleModal();\n  };\n\n  return createPortal(\n    <div className={css.Overlay} onClick={handleBackdropClick}>\n      <div className={css.Modal}>\n        {children}\n      </div>\n    </div>,\n    modalWindow\n  );\n};\n\nexport default Modal;\n"],"names":["loading","authorsBooks","handleBackFromAuthor","useState","modalIsOpen","setModalIsOpen","bookdata","setBookData","toggleModal","book","length","type","onClick","map","id","volumeInfo","title","publisher","publishedDate","description","pageCount","imageLinks","smallThumbnail","src","alt","width","height","language","publishe","modalWindow","document","getElementById","children","useEffect","handleKeyDown","e","code","window","addEventListener","removeEventListener","createPortal","className","css","evt","target","currentTarget"],"sourceRoot":""}